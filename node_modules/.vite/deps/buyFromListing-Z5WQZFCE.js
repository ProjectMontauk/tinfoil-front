import {
  getListing,
  isGetListingSupported,
  isListingValid
} from "./chunk-W55LX6ED.js";
import "./chunk-YXDGZMIF.js";
import "./chunk-HMACK4BM.js";
import "./chunk-GA6RVSEP.js";
import {
  once
} from "./chunk-NACC2RRT.js";
import "./chunk-SA4MLC75.js";
import {
  prepareContractCall
} from "./chunk-GN5VQLP7.js";
import {
  isNativeTokenAddress
} from "./chunk-YCZ3YGMG.js";
import {
  detectMethod
} from "./chunk-47CFHYO7.js";
import "./chunk-QGXAPRFG.js";
import "./chunk-3JQSFVWL.js";
import "./chunk-E4LYAXWZ.js";
import "./chunk-NOV7XZ3Z.js";
import "./chunk-HAADYJEF.js";
import "./chunk-6IIMS5BN.js";
import "./chunk-S6KQNYT6.js";
import "./chunk-FP4BM2OU.js";
import "./chunk-4QK53XYS.js";
import "./chunk-6UGMW7YR.js";
import "./chunk-ML3AFUII.js";
import "./chunk-XHJTXGWB.js";
import "./chunk-OISUMZDD.js";
import "./chunk-WS4IU3RU.js";
import "./chunk-CSXIMWT5.js";
import "./chunk-NZNWWTAY.js";
import "./chunk-YQVK3R6M.js";
import "./chunk-YI5GCKPB.js";
import "./chunk-AZC75Q4J.js";
import "./chunk-VWCCEMFN.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-XM2SSLRL.js";
import "./chunk-4XTXPSIE.js";
import "./chunk-URITLAIO.js";
import "./chunk-2CIJO3V3.js";
import "./chunk-LTI5ICKI.js";
import "./chunk-MTFDOOBS.js";
import "./chunk-6FJDHQ5V.js";
import "./chunk-3OXDSLPJ.js";
import "./chunk-PPP72TBL.js";
import "./chunk-4ACTGFHH.js";
import "./chunk-OS7ZSSJM.js";

// node_modules/thirdweb/dist/esm/extensions/marketplace/__generated__/IDirectListings/write/buyFromListing.js
var FN_SELECTOR = "0x704232dc";
var FN_INPUTS = [
  {
    type: "uint256",
    name: "_listingId"
  },
  {
    type: "address",
    name: "_buyFor"
  },
  {
    type: "uint256",
    name: "_quantity"
  },
  {
    type: "address",
    name: "_currency"
  },
  {
    type: "uint256",
    name: "_expectedTotalPrice"
  }
];
var FN_OUTPUTS = [];
function isBuyFromListingSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function buyFromListing(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    contract: options.contract,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.listingId,
        resolvedOptions.buyFor,
        resolvedOptions.quantity,
        resolvedOptions.currency,
        resolvedOptions.expectedTotalPrice
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    },
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    },
    authorizationList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.authorizationList;
    }
  });
}

// node_modules/thirdweb/dist/esm/extensions/marketplace/direct-listings/write/buyFromListing.js
function buyFromListing2(options) {
  return buyFromListing({
    contract: options.contract,
    asyncParams: async () => {
      const listing = await getListing({
        contract: options.contract,
        listingId: options.listingId
      });
      const listingValidity = await isListingValid({
        contract: options.contract,
        listing,
        quantity: options.quantity
      });
      if (!listingValidity.valid) {
        throw new Error(listingValidity.reason);
      }
      return {
        listingId: options.listingId,
        quantity: options.quantity,
        buyFor: options.recipient,
        currency: listing.currencyContractAddress,
        expectedTotalPrice: listing.pricePerToken * options.quantity,
        overrides: {
          value: isNativeTokenAddress(listing.currencyContractAddress) ? listing.pricePerToken * options.quantity : 0n,
          extraGas: 50000n,
          // add extra gas to account for router call
          erc20Value: isNativeTokenAddress(listing.currencyContractAddress) ? void 0 : {
            amountWei: listing.pricePerToken * options.quantity,
            tokenAddress: listing.currencyContractAddress
          }
        }
      };
    }
  });
}
function isBuyFromListingSupported2(availableSelectors) {
  return isBuyFromListingSupported(availableSelectors) && isGetListingSupported(availableSelectors);
}
export {
  buyFromListing2 as buyFromListing,
  isBuyFromListingSupported2 as isBuyFromListingSupported
};
//# sourceMappingURL=buyFromListing-Z5WQZFCE.js.map
