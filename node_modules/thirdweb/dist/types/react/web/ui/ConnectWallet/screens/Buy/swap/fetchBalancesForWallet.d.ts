import type { Chain } from "../../../../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../../../../client/client.js";
import type { Wallet } from "../../../../../../../wallets/interfaces/wallet.js";
import { type GetWalletBalanceResult } from "../../../../../../../wallets/utils/getWalletBalance.js";
import type { PayUIOptions } from "../../../../../../core/hooks/connection/ConnectButtonProps.js";
import type { SupportedTokens, TokenInfo } from "../../../../../../core/utils/defaultTokens.js";
import { type ERC20OrNativeToken } from "../../nativeToken.js";
type FetchBalancesParams = {
    wallet: Wallet;
    accountAddress: string | undefined;
    sourceSupportedTokens: SupportedTokens;
    toChain: Chain;
    toToken: ERC20OrNativeToken;
    tokenAmount: string;
    mode: PayUIOptions["mode"];
    client: ThirdwebClient;
};
export type TokenBalance = {
    balance: GetWalletBalanceResult;
    chain: Chain;
    token: TokenInfo;
};
export declare function fetchBalancesForWallet({ wallet, accountAddress, sourceSupportedTokens, toChain, toToken, tokenAmount, mode, client, }: FetchBalancesParams): Promise<TokenBalance[]>;
export {};
//# sourceMappingURL=fetchBalancesForWallet.d.ts.map